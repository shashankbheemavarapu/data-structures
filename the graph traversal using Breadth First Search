#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Queue {
    int items[MAX];
    int front;
    int rear;
};

struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = -1;
    queue->rear = -1;
    return queue;
}

int isEmpty(struct Queue* queue) {
    if (queue->rear == -1)
        return 1;
    else
        return 0;
}

void enqueue(struct Queue* queue, int value) {
    if (queue->rear == MAX - 1)
        printf("Queue is full");
    else {
        if (queue->front == -1)
            queue->front = 0;
        queue->rear++;
        queue->items[queue->rear] = value;
    }
}

int dequeue(struct Queue* queue) {
    int item;
    if (isEmpty(queue)) {
        printf("Queue is empty");
        item = -1;
    } else {
        item = queue->items[queue->front];
        queue->front++;
        if (queue->front > queue->rear) {
            queue->front = queue->rear = -1;
        }
    }
    return item;
}

void BFS(int adj_matrix[MAX][MAX], int visited[MAX], int start, int n) {
    struct Queue* q = createQueue();

    visited[start] = 1;
    printf("%d ", start);

    enqueue(q, start);

    while (!isEmpty(q)) {
        int current_node = dequeue(q);

        for (int i = 0; i < n; i++) {
            if (adj_matrix[current_node][i] == 1 && !visited[i]) {
                visited[i] = 1;
                printf("%d ", i);
                enqueue(q, i);
            }
        }
    }
}

int main() {
    int adj_matrix[MAX][MAX];
    int visited[MAX];
    int n, i, j;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix:\n");
    
    for (i = 0; i < n; i++) {
        visited[i] = 0;

        for (j = 0; j < n; j++)
            scanf("%d", &adj_matrix[i][j]);
    }

    printf("Breadth First Search starting from vertex 0: ");
    
    BFS(adj_matrix, visited, 0, n);

    return 0;
}
